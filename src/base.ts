/* tslint:disable */
/* eslint-disable */
/**
 * ICP connection data v2
 * The ICP connection data API provides two functions to get data on Installation Control Points (ICP): <ul> <li>The GET action - a search function, allows searching by via address filters and returns matching results allowing the correct ICP to be identified.</li> <li>The GET action - get by id, takes a single ICP and returns detailed information about it.</li>  </ul>  <p> <p>A management policy for this API is set in the <a href=\"https://emi.portal.azure-api.net/products/56a92b7074ff88075485e86b\"> API product</a>. </p>  In order to use the ICP connection data you must subscribe to the <a href=\"https://emi.portal.azure-api.net/products\">ICP connection data</a> API product to receive your API key. <p>
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from "./configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';

export const BASE_PATH = "https://emi.azure-api.net/ICPConnectionData/v2".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: AxiosRequestConfig;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError" = "RequiredError";
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}
