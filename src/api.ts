/* tslint:disable */
/* eslint-disable */
/**
 * ICP connection data v2
 * The ICP connection data API provides two functions to get data on Installation Control Points (ICP): <ul> <li>The GET action - a search function, allows searching by via address filters and returns matching results allowing the correct ICP to be identified.</li> <li>The GET action - get by id, takes a single ICP and returns detailed information about it.</li>  </ul>  <p> <p>A management policy for this API is set in the <a href=\"https://emi.portal.azure-api.net/products/56a92b7074ff88075485e86b\"> API product</a>. </p>  In order to use the ICP connection data you must subscribe to the <a href=\"https://emi.portal.azure-api.net/products\">ICP connection data</a> API product to receive your API key. <p>
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BadRequest
 */
export interface BadRequest {
    /**
     * 
     * @type {string}
     * @memberof BadRequest
     */
    'Message'?: string;
}
/**
 * 
 * @export
 * @interface Fobidden
 */
export interface Fobidden {
    /**
     * 
     * @type {number}
     * @memberof Fobidden
     */
    'statusCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof Fobidden
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ICPAddress
 */
export interface ICPAddress {
    /**
     * 
     * @type {string}
     * @memberof ICPAddress
     */
    'PropertyNameOrDescription'?: string;
    /**
     * 
     * @type {string}
     * @memberof ICPAddress
     */
    'PhysicalAddressUnit'?: string;
    /**
     * 
     * @type {string}
     * @memberof ICPAddress
     */
    'PhysicalAddressNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof ICPAddress
     */
    'PhysicalAddressStreet'?: string;
    /**
     * 
     * @type {string}
     * @memberof ICPAddress
     */
    'PhysicalAddressSuburb'?: string;
    /**
     * 
     * @type {string}
     * @memberof ICPAddress
     */
    'PhysicalAddressTown'?: string;
    /**
     * 
     * @type {string}
     * @memberof ICPAddress
     */
    'PhysicalAddressRegion'?: string;
    /**
     * 
     * @type {number}
     * @memberof ICPAddress
     */
    'PhysicalAddressPostCode'?: number;
    /**
     * 
     * @type {number}
     * @memberof ICPAddress
     */
    'GPS_Easting'?: number;
    /**
     * 
     * @type {number}
     * @memberof ICPAddress
     */
    'GPS_Northing'?: number;
}
/**
 * 
 * @export
 * @interface ICPDetails
 */
export interface ICPDetails {
    /**
     * 
     * @type {string}
     * @memberof ICPDetails
     */
    'ICPIdentifier'?: string;
    /**
     * 
     * @type {number}
     * @memberof ICPDetails
     */
    'ICPStatus'?: number;
    /**
     * 
     * @type {ICPAddress}
     * @memberof ICPDetails
     */
    'Address'?: ICPAddress;
    /**
     * 
     * @type {ICPNetwork}
     * @memberof ICPDetails
     */
    'Network'?: ICPNetwork;
    /**
     * 
     * @type {ICPNetworkPricing}
     * @memberof ICPDetails
     */
    'Pricing'?: ICPNetworkPricing;
    /**
     * 
     * @type {ICPTrader}
     * @memberof ICPDetails
     */
    'Trader'?: ICPTrader;
    /**
     * 
     * @type {ICPMetering}
     * @memberof ICPDetails
     */
    'Metering'?: ICPMetering;
    /**
     * 
     * @type {Array<string>}
     * @memberof ICPDetails
     */
    'Messages'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ICPMetering
 */
export interface ICPMetering {
    /**
     * 
     * @type {string}
     * @memberof ICPMetering
     */
    'MeteringEquipmentProviderParticipantID'?: string;
    /**
     * 
     * @type {string}
     * @memberof ICPMetering
     */
    'MeteringEquipmentProviderParticipantName'?: string;
    /**
     * 
     * @type {Array<MeteringInstallationInformation>}
     * @memberof ICPMetering
     */
    'InstallationInformation'?: Array<MeteringInstallationInformation>;
}
/**
 * 
 * @export
 * @interface ICPNetwork
 */
export interface ICPNetwork {
    /**
     * 
     * @type {string}
     * @memberof ICPNetwork
     */
    'NetworkParticipantID'?: string;
    /**
     * 
     * @type {string}
     * @memberof ICPNetwork
     */
    'NetworkParticipantName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ICPNetwork
     */
    'POC'?: string;
    /**
     * 
     * @type {string}
     * @memberof ICPNetwork
     */
    'ReconciliationType'?: string;
    /**
     * 
     * @type {string}
     * @memberof ICPNetwork
     */
    'InitialElectricallyConnectedDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof ICPNetwork
     */
    'GenerationCapacity'?: number;
    /**
     * 
     * @type {string}
     * @memberof ICPNetwork
     */
    'FuelType'?: string;
    /**
     * 
     * @type {string}
     * @memberof ICPNetwork
     */
    'DirectBilledStatus'?: string;
}
/**
 * 
 * @export
 * @interface ICPNetworkPricing
 */
export interface ICPNetworkPricing {
    /**
     * 
     * @type {string}
     * @memberof ICPNetworkPricing
     */
    'DistributorPriceCategoryCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof ICPNetworkPricing
     */
    'DistributorLossCategoryCode'?: string;
    /**
     * 
     * @type {number}
     * @memberof ICPNetworkPricing
     */
    'ChargeableCapacity'?: number;
    /**
     * 
     * @type {string}
     * @memberof ICPNetworkPricing
     */
    'DistributorInstallationDetails'?: string;
}
/**
 * 
 * @export
 * @interface ICPSearchDetails
 */
export interface ICPSearchDetails {
    /**
     * 
     * @type {ICPAddress}
     * @memberof ICPSearchDetails
     */
    'Address'?: ICPAddress;
    /**
     * 
     * @type {string}
     * @memberof ICPSearchDetails
     */
    'ICPIdentifier'?: string;
    /**
     * 
     * @type {number}
     * @memberof ICPSearchDetails
     */
    'ICPStatus'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof ICPSearchDetails
     */
    'Messages'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ICPTrader
 */
export interface ICPTrader {
    /**
     * 
     * @type {boolean}
     * @memberof ICPTrader
     */
    'TraderSwitchInProgress'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ICPTrader
     */
    'TraderParticipantID'?: string;
    /**
     * 
     * @type {string}
     * @memberof ICPTrader
     */
    'TraderParticipantName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ICPTrader
     */
    'ProfileCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof ICPTrader
     */
    'ANZSICcode'?: string;
    /**
     * 
     * @type {string}
     * @memberof ICPTrader
     */
    'DailyUnmeteredkWh'?: string;
    /**
     * 
     * @type {string}
     * @memberof ICPTrader
     */
    'UnmeteredLoadDetails'?: string;
}
/**
 * 
 * @export
 * @interface MeteringChannelInformation
 */
export interface MeteringChannelInformation {
    /**
     * 
     * @type {string}
     * @memberof MeteringChannelInformation
     */
    'MeteringComponentSerialNumber'?: string;
    /**
     * 
     * @type {number}
     * @memberof MeteringChannelInformation
     */
    'ChannelNumber'?: number;
    /**
     * 
     * @type {string}
     * @memberof MeteringChannelInformation
     */
    'RegisterContentCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MeteringChannelInformation
     */
    'PeriodOfAvailability'?: string;
    /**
     * 
     * @type {string}
     * @memberof MeteringChannelInformation
     */
    'UnitOfMeasurement'?: string;
    /**
     * 
     * @type {string}
     * @memberof MeteringChannelInformation
     */
    'EnergyFlowDirection'?: string;
    /**
     * 
     * @type {string}
     * @memberof MeteringChannelInformation
     */
    'AccumulatorType'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MeteringChannelInformation
     */
    'SwitchReadIndicator'?: boolean;
}
/**
 * 
 * @export
 * @interface MeteringComponentInformation
 */
export interface MeteringComponentInformation {
    /**
     * 
     * @type {string}
     * @memberof MeteringComponentInformation
     */
    'ComponentType'?: string;
    /**
     * 
     * @type {string}
     * @memberof MeteringComponentInformation
     */
    'MeteringComponentSerialNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof MeteringComponentInformation
     */
    'MeterType'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MeteringComponentInformation
     */
    'AMIFlag'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof MeteringComponentInformation
     */
    'CompensationFactor'?: number;
    /**
     * 
     * @type {Array<MeteringChannelInformation>}
     * @memberof MeteringComponentInformation
     */
    'ChannelInformation'?: Array<MeteringChannelInformation>;
}
/**
 * 
 * @export
 * @interface MeteringInstallationInformation
 */
export interface MeteringInstallationInformation {
    /**
     * 
     * @type {number}
     * @memberof MeteringInstallationInformation
     */
    'MeteringInstallationCategory'?: number;
    /**
     * 
     * @type {string}
     * @memberof MeteringInstallationInformation
     */
    'MeteringInstallationType'?: string;
    /**
     * 
     * @type {string}
     * @memberof MeteringInstallationInformation
     */
    'CertificationExpiryDate'?: string;
    /**
     * 
     * @type {Array<MeteringComponentInformation>}
     * @memberof MeteringInstallationInformation
     */
    'ComponentInformation'?: Array<MeteringComponentInformation>;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Provide a single valid ICP to return its details. This will always return a list.  Any lower case characters in the ICP will be converted to upper case.  A valid ICP is a 15 character string, comprised of 10 digits, 2 characters, and 3 hexi-decimal characters.
         * @summary Get by id
         * @param {string} iCP A valid ICP is a 15 character string, comprised of 10 digits, 2 characters, and 3 hexi-decimal characters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (iCP: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iCP' is not null or undefined
            assertParamExists('getById', 'iCP', iCP)
            const localVarPath = `/single/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Ocp-Apim-Subscription-Key", configuration)

            // authentication apiKeyQuery required
            await setApiKeyToObject(localVarQueryParameter, "subscription-key", configuration)

            if (iCP !== undefined) {
                localVarQueryParameter['ICP'] = iCP;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The most accurate and fast way to find connection information is by using the ‘get by id’ call with an ICP number. This is a wildcard search filter and if you are using this search function you will likely get multiple addresses returned. For example a search for “2 Main Street” will return results for locations at 2, 20, 22… etc, along with results for any other Main Streets around the country. However, in some instances no information might be returned. This may be due to the way the address information is stored in the registry or other differences between the address of the ICP and the address entered or address that the ICP serves. ICP numbers can be found on any power bill.
         * @summary Search
         * @param {string} [streetNumber] The street number. This is a wildcard value. (e.g. 2 will return 2, 20, 22 etc)
         * @param {string} [streetName] The street name. This is a wildcard value.
         * @param {string} [suburbOrTown] The suburb or town. This is a wildcard value.
         * @param {string} [region] The region. This is NOT a wildcard value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search: async (streetNumber?: string, streetName?: string, suburbOrTown?: string, region?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/search/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Ocp-Apim-Subscription-Key", configuration)

            // authentication apiKeyQuery required
            await setApiKeyToObject(localVarQueryParameter, "subscription-key", configuration)

            if (streetNumber !== undefined) {
                localVarQueryParameter['streetNumber'] = streetNumber;
            }

            if (streetName !== undefined) {
                localVarQueryParameter['streetName'] = streetName;
            }

            if (suburbOrTown !== undefined) {
                localVarQueryParameter['suburbOrTown'] = suburbOrTown;
            }

            if (region !== undefined) {
                localVarQueryParameter['region'] = region;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Provide a single valid ICP to return its details. This will always return a list.  Any lower case characters in the ICP will be converted to upper case.  A valid ICP is a 15 character string, comprised of 10 digits, 2 characters, and 3 hexi-decimal characters.
         * @summary Get by id
         * @param {string} iCP A valid ICP is a 15 character string, comprised of 10 digits, 2 characters, and 3 hexi-decimal characters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(iCP: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ICPDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(iCP, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The most accurate and fast way to find connection information is by using the ‘get by id’ call with an ICP number. This is a wildcard search filter and if you are using this search function you will likely get multiple addresses returned. For example a search for “2 Main Street” will return results for locations at 2, 20, 22… etc, along with results for any other Main Streets around the country. However, in some instances no information might be returned. This may be due to the way the address information is stored in the registry or other differences between the address of the ICP and the address entered or address that the ICP serves. ICP numbers can be found on any power bill.
         * @summary Search
         * @param {string} [streetNumber] The street number. This is a wildcard value. (e.g. 2 will return 2, 20, 22 etc)
         * @param {string} [streetName] The street name. This is a wildcard value.
         * @param {string} [suburbOrTown] The suburb or town. This is a wildcard value.
         * @param {string} [region] The region. This is NOT a wildcard value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async search(streetNumber?: string, streetName?: string, suburbOrTown?: string, region?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ICPSearchDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.search(streetNumber, streetName, suburbOrTown, region, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Provide a single valid ICP to return its details. This will always return a list.  Any lower case characters in the ICP will be converted to upper case.  A valid ICP is a 15 character string, comprised of 10 digits, 2 characters, and 3 hexi-decimal characters.
         * @summary Get by id
         * @param {string} iCP A valid ICP is a 15 character string, comprised of 10 digits, 2 characters, and 3 hexi-decimal characters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(iCP: string, options?: any): AxiosPromise<ICPDetails> {
            return localVarFp.getById(iCP, options).then((request) => request(axios, basePath));
        },
        /**
         * The most accurate and fast way to find connection information is by using the ‘get by id’ call with an ICP number. This is a wildcard search filter and if you are using this search function you will likely get multiple addresses returned. For example a search for “2 Main Street” will return results for locations at 2, 20, 22… etc, along with results for any other Main Streets around the country. However, in some instances no information might be returned. This may be due to the way the address information is stored in the registry or other differences between the address of the ICP and the address entered or address that the ICP serves. ICP numbers can be found on any power bill.
         * @summary Search
         * @param {string} [streetNumber] The street number. This is a wildcard value. (e.g. 2 will return 2, 20, 22 etc)
         * @param {string} [streetName] The street name. This is a wildcard value.
         * @param {string} [suburbOrTown] The suburb or town. This is a wildcard value.
         * @param {string} [region] The region. This is NOT a wildcard value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search(streetNumber?: string, streetName?: string, suburbOrTown?: string, region?: string, options?: any): AxiosPromise<ICPSearchDetails> {
            return localVarFp.search(streetNumber, streetName, suburbOrTown, region, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Provide a single valid ICP to return its details. This will always return a list.  Any lower case characters in the ICP will be converted to upper case.  A valid ICP is a 15 character string, comprised of 10 digits, 2 characters, and 3 hexi-decimal characters.
     * @summary Get by id
     * @param {string} iCP A valid ICP is a 15 character string, comprised of 10 digits, 2 characters, and 3 hexi-decimal characters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getById(iCP: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getById(iCP, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The most accurate and fast way to find connection information is by using the ‘get by id’ call with an ICP number. This is a wildcard search filter and if you are using this search function you will likely get multiple addresses returned. For example a search for “2 Main Street” will return results for locations at 2, 20, 22… etc, along with results for any other Main Streets around the country. However, in some instances no information might be returned. This may be due to the way the address information is stored in the registry or other differences between the address of the ICP and the address entered or address that the ICP serves. ICP numbers can be found on any power bill.
     * @summary Search
     * @param {string} [streetNumber] The street number. This is a wildcard value. (e.g. 2 will return 2, 20, 22 etc)
     * @param {string} [streetName] The street name. This is a wildcard value.
     * @param {string} [suburbOrTown] The suburb or town. This is a wildcard value.
     * @param {string} [region] The region. This is NOT a wildcard value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public search(streetNumber?: string, streetName?: string, suburbOrTown?: string, region?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).search(streetNumber, streetName, suburbOrTown, region, options).then((request) => request(this.axios, this.basePath));
    }
}


